name: crdtgraph


# The type of nodes
preamble: |
  (declare-sort E 0)
  (declare-sort U 0)
  (declare-datatypes ( (Pair 2) ) (
    (par (X Y) ( (pair (first X) (second Y)) ))))

# Note: It seems that we need to gradually fill the terms and
# predicates if we see that the tool can't prove commutativity. Doing
# it prematurely doesn't offer anything.

# TODO: We need to check that making small mistakes leads the tool to
# failure in order to increase confidence that we haven't made
# overassumptions.

# Note: In the final result, we don't care about the commutativity of
# two prepare-effect methods (simply because they would have been
# executed in the same replica). We care about the commutativity of
# effects with prepare-effect, and effect methods.

# The three vertices parts of the state must correspond.
# Invariant: v in Vertices <=> VerticesSize[v] >= 0 <=> not empty(VerticesUnique[v])

state:
# The set of vertices
  - name: Vertices
    type: (Set E)
# The set of unique values w. This has to continuously grow.
# We never remove an element from it
  - name: Unique
    type: (Set U)
# A map from the vertices to the unique identifiers.
# TODO: VerticesSize might be redundant since we can use cardinality
  - name: VerticesSize
    type: (Array E Int)
  - name: VerticesUnique
    type: (Array E (Set U))

# The two states are equal if their vertices and arcs are equal
# (Maybe this has to be relaxed to not account for unique values w)
states_equal:
  definition: (and (= Vertices_1 Vertices_2))

methods:
# The effect of addvertex seems to be the same as its complete method
  - name: addvertex
    args:
      - name: v
        type: E
# We encode w as part of the arguments as there doesn't seem to be a way to
# generate an arbitrary unique value in the method.
      - name: w
        type: U
    return:
      - name: result
        type: Bool
    requires: |
      (and (not (member w Unique))
           (= (member v Vertices)
              (> (select VerticesSize v) 0)
              (> (card (select VerticesUnique v)) 0))
           (= (not (member w Unique))
              (forall ((vw E)) (not (member w (select VerticesUnique v))))))
# The second and third conjuncts are part of the invariant
    ensures: |
      (and result
           (= Unique_new (insert w Unique))
           (ite (member v Vertices)
                (and (= VerticesSize_new (store VerticesSize v (+ 1 (select VerticesSize v))))
                     (= VerticesUnique_new (store VerticesUnique v (insert w (select VerticesUnique v))))
                     (= Vertices_new Vertices))
                (and (= VerticesSize_new (store VerticesSize v 1))
                     (= VerticesUnique_new (store VerticesUnique v (singleton w)))
                     (= Vertices_new (insert v Vertices)))))
# If the vertex is already in, then we add one more unique value to it
#
# If the vertex is not in, then we only add a singleton to it
    terms:
      E: [$1]
      U: [$2]
# TODO: Complete this (It is unclear what its purpose is though. Maybe to find predicates?)
#      (Set E): [S, (singleton $1), (union S (singleton $1))]

# At the moment removeVertex doesn't commute with addVertex and that is reasonable because
# if the prepare of removeVertex is performed after addVertex on a node then it will remove that Node.
# The point is to check whether the effect of removeVertex commutes with add
  - name: removevertex
    args:
      - name: v
        type: E
    return:
      - name: result
        type: Bool
    requires: |
       (and (member v Vertices)
            (> (select VerticesSize v) 0))
    ensures: |
       (and (= Vertices_new (setminus Vertices (singleton v)))
            (= Unique_new Unique)
            (= VerticesSize_new (store VerticesSize v 0))
            (= VerticesUnique_new (store VerticesUnique v (as emptyset (Set U))))
            result)
    terms:
      E: [$1]
#   - name: removevertexeffect
#     args:
#       - name: v
#         type: E
#       - name: vunique
#         type: (Set U)
#     return:
#       - name: result
#         type: Bool
#     requires: |
#        true
# # TODO: What should the precondition be for v_unique?
#     ensures: |
#        (and (= VerticesUnique_new
#                  (store VerticesUnique v
#                      (setminus (select VerticesUnique v) vunique)))
#             result)
# # TODO: Complete that, either by asserting that the invariant is preserved, or by explicitly
# #       removing the vertex if the set of its unique values is now empty
#     terms:
#       E: [$1]

predicates:
  - name: "="
    type: [E, E]
  - name: "="
    type: [U, U]
#  - name: "="
#    type: [(Pair E U), (Pair E U)]
#  - name: "="
#    type: [(Set (Pair E U)), (Set (Pair E U))]
  - name: "="
    type: [(Set U), (Set U)]
  - name: "member"
    type: [E, (Set E)]
  - name: "member"
    type: [U, (Set U)]
#  - name: "member"
#    type: [(Pair E U), (Set (Pair E U))]