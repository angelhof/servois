name: crdtgraph


# The type of nodes
preamble: |
  (declare-sort E 0)
  (declare-sort U 0)
  (declare-datatypes ( (Pair 2) ) (
    (par (X Y) ( (pair (first X) (second Y)) ))))

# Note: It seems that we need to gradually fill the terms and
# predicates if we see that the tool can't prove commutativity. Doing
# it prematurely doesn't offer anything.

# TODO: We need to check that making small mistakes leads the tool to
# failure in order to increase confidence that we haven't made
# overassumptions.

# Note: In the final result, we don't care about the commutativity of
# two prepare-effect methods (simply because they would have been
# executed in the same replica). We care about the commutativity of
# effects with prepare-effect, and effect methods.

state:
# The set of vertices
  - name: Vertices
    type: (Set (Pair E U))
# The set of unique values w
  - name: Unique
    type: (Set U)

# The two states are equal if their vertices and arcs are equal
# (Maybe this has to be relaxed to not account for unique values w)
states_equal:
  definition: (and (= Vertices_1 Vertices_2))

methods:
# The effect of addvertex seems to be the same as its complete method
  - name: addvertex
    args:
      - name: v
        type: E
# We encode w as part of the arguments as there doesn't seem to be a way to
# generate an arbitrary unique value in the method.
      - name: w
        type: U
    return:
      - name: result
        type: Bool
    requires: |
      (not (member w Unique))
    ensures: |
      (and (= Vertices_new (union Vertices (singleton (pair v w))))
           (= Unique_new (union Unique (singleton w)))
           result)
    terms:
      E: [$1]
      U: [$2]
# TODO: Complete this (It is unclear what its purpose is though. Maybe to find predicates?)
#      (Set E): [S, (singleton $1), (union S (singleton $1))]

# The effect of addvertex seems to be the same as its complete method
  - name: removevertex
    args:
      - name: v
        type: E
    return:
      - name: result
        type: Bool
# TODO: This seems to cause an error
    requires: |
      (exists ((w U)) (member (pair v w) Vertices))
    ensures: |
      (and true
           result)
    terms:
      E: [$1]
# TODO: Complete this
#      (Set E): [S, (singleton $1), (union S (singleton $1))]

predicates:
  - name: "="
    type: [E, E]
  - name: "="
    type: [U, U]
  - name: "="
    type: [(Pair E U), (Pair E U)]
  - name: "="
    type: [(Set (Pair E U)), (Set (Pair E U))]
  - name: "="
    type: [(Set U), (Set U)]
#  - name: "member"
#    type: [E, (Set E)]
