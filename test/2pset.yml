name: 2pset

# The type of nodes
preamble: |
  (declare-sort V 0)

# Note: In the final result, we don't care about the commutativity of
# two prepare-effect methods (simply because they would have been
# executed in the same replica). We care about the commutativity of
# effects with prepare-effect, and effect methods.


state:
  - name: Add
    type: (Set V)
  - name: Remove
    type: (Set V)

states_equal:
  definition: (and (= Add_1 Add_2) (= Remove_1 Remove_2))

methods:
  - name: add
    args:
      - name: v
        type: V
    return:
      - name: result
        type: Bool
    requires: |
      true
    ensures: |
      (and result
           (= Add_new (union (setminus (singleton v) Remove) Add))
           (= Remove_new Remove))
    terms:
      V: [$1]
  - name: remove
    args:
      - name: v
        type: V
    return:
      - name: result
        type: Bool
    requires: |
       true
    ensures: |
       (and result
            (= Add_new (setminus Add (singleton v)))
            (= Remove_new (insert v Remove)))
    terms:
      V: [$1]

predicates:
  - name: "="
    type: [V, V]
  - name: "member"
    type: [V, (Set V)]
